# KinoLiveViewNative

```elixir
Mix.install(
  [
    {:kino, "~> 0.9.3"},
    {:kino_live_view_native, path: Path.expand(Path.join(__DIR__, ".."))}
  ],
  config: [
    live_view_native: [
      {:platforms, [LiveViewNativeSwiftUi.Platform]},
      {LiveViewNativeSwiftUi.Platform, [app_name: "LiveView Native"]}
    ],
    kino_live_view_native: [
      {Server.Endpoint,
       [
         http: [ip: {127, 0, 0, 1}, port: 5001],
         server: true,
         pubsub_server: Server.PubSub,
         live_view: [signing_salt: "aaaaaaaa"],
         secret_key_base: String.duplicate("a", 64),
         live_reload: [
           patterns: [
             ~r/#{__ENV__.file |> String.split("#") |> hd()}$/
           ]
         ]
       ]}
    ]
  ]
)
```

## Section

<!-- livebook:{"attrs":{"action":":index","code":"defmodule Server.HomeLive do\n  use Phoenix.LiveView, layout: {__MODULE__, :layout}\n  use LiveViewNative.LiveView\n\n  def layout(assigns) do\n    ~H\"\"\"\n      <%= @inner_content %>\n    \"\"\"\n  end\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    ~Z\"\"\"\n    <Text modifiers={@native |> foreground_style(primary: {:color, :mint})}>\n      Hello from LiveView Native!\n    </Text>\n    \"\"\"swiftui\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <div>Hello from LiveView!!</div>\n    \"\"\"\n  end\nend\n","path":"/"},"chunks":[[0,502],[504,2],[508,42]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
defmodule Server.HomeLive do
  use Phoenix.LiveView, layout: {__MODULE__, :layout}
  use LiveViewNative.LiveView

  def layout(assigns) do
    ~H"""
      <%= @inner_content %>
    """
  end

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~Z"""
    <Text modifiers={@native |> foreground_style(primary: {:color, :mint})}>
      Hello from LiveView Native!
    </Text>
    """swiftui
  end

  def render(assigns) do
    ~H"""
    <div>Hello from LiveView!!</div>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")
```

Go to http://localhost:5001

<!-- livebook:{"attrs":{"action":":index","code":"defmodule Server.HiLive do\n  use Phoenix.LiveView, layout: {__MODULE__, :layout}\n  use LiveViewNative.LiveView\n\n  def layout(assigns) do\n    ~H\"\"\"\n      <%= @inner_content %>\n    \"\"\"\n  end\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    ~Z\"\"\"\n    <Text modifiers={@native |> foreground_style(primary: {:color, :mint})}>\n      Hi from LiveView Native!\n    </Text>\n    \"\"\"swiftui\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <div>Hi from Live</div>\n    \"\"\"\n  end\nend\n","path":"/hi"},"chunks":[[0,488],[490,2],[494,44]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
defmodule Server.HiLive do
  use Phoenix.LiveView, layout: {__MODULE__, :layout}
  use LiveViewNative.LiveView

  def layout(assigns) do
    ~H"""
      <%= @inner_content %>
    """
  end

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~Z"""
    <Text modifiers={@native |> foreground_style(primary: {:color, :mint})}>
      Hi from LiveView Native!
    </Text>
    """swiftui
  end

  def render(assigns) do
    ~H"""
    <div>Hi from Live</div>
    """
  end
end
|> KinoLiveViewNative.register("/hi", ":index")
```

http://localhost:5001/hi

<!-- livebook:{"attrs":{"action":":index","code":"defmodule Server.HelloNameLive do\n  use Phoenix.LiveView, layout: {__MODULE__, :layout}\n  use LiveViewNative.LiveView\n\n  def layout(assigns) do\n    ~H\"\"\"\n      <%= @inner_content %>\n    \"\"\"\n  end\n\n  @impl true\n  def mount(%{\"name\" => name}, _session, socket) do\n    {:ok, \n    socket\n    |> assign(name: name)}\n  end\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    ~Z\"\"\"\n    <Text modifiers={@native |> foreground_style(primary: {:color, :mint})}>\n      Hello <%= @name %>\n    </Text>\n    \"\"\"swiftui\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <div>Hello <%= @name %></div>\n    \"\"\"\n  end\nend\n","path":"/hello/:name"},"chunks":[[0,616],[618,2],[622,53]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
defmodule Server.HelloNameLive do
  use Phoenix.LiveView, layout: {__MODULE__, :layout}
  use LiveViewNative.LiveView

  def layout(assigns) do
    ~H"""
      <%= @inner_content %>
    """
  end

  @impl true
  def mount(%{"name" => name}, _session, socket) do
    {:ok,
     socket
     |> assign(name: name)}
  end

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~Z"""
    <Text modifiers={@native |> foreground_style(primary: {:color, :mint})}>
      Hello <%= @name %>
    </Text>
    """swiftui
  end

  def render(assigns) do
    ~H"""
    <div>Hello <%= @name %></div>
    """
  end
end
|> KinoLiveViewNative.register("/hello/:name", ":index")
```

Go to http://localhost:5001/hello/josh

```elixir
KinoLiveViewNative.get_routes()
```
